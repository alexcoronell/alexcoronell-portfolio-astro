---
import MenuIcon from "../UI/icons/MenuIcon.astro";
import CloseIcon from "../UI/icons/CloseIcon.astro";
import MainMenuItem from "./MainMenuItem.astro";

const menuItems = [
  { name: "About", url: "#" },
  { name: "Experience", url: "#" },
  { name: "Work", url: "#" },
  { name: "Contact", url: "#" },
];
---

<main-menu class="MainMenu hidden-menu p-3">
  <button type="button" id="open-menu-button" class="lg:hidden"
    ><MenuIcon class="size-10" /></button
  >
  <div class="blurFilter filter hiddenFilter" id="filter"></div>
  <nav id="menu" class="menu hidden-menu">
    <div class="areaCloseMenuButton">
      <button type="button" id="close-menu-button"
        ><CloseIcon class="size-10" /></button
      >
    </div>
    <div class="menuItems">
      {
        menuItems.map((item, index) => {
          return <MainMenuItem index={index} name={item.name} url={item.url} />;
        })
      }
      <a href="#" class="navResumeButton btn-primary">Resume</a>
    </div>
  </nav>
</main-menu>

<script is:inline>
  class MainMenu extends HTMLElement {
    openMenuButton = null;
    closeMenuButton = null;
    menu = null;
    filter = null;
    hiddenMenu = true;

    constructor() {
      super();
      this.openMenuButton = document.getElementById("open-menu-button");
      this.closeMenuButton = document.getElementById("close-menu-button");
      this.menu = document.getElementById("menu");
      this.filter = document.getElementById("filter");

      this.openMenuButton?.addEventListener("click", () => {
        console.log("open");
        this.toggleMenu(false);
      });

      this.closeMenuButton?.addEventListener("click", () => {
        this.toggleMenu(true);
        console.log("close");
      });
    }
    toggleMenu = (toggle) => {
      this.hiddenMenu = toggle;
      if (this.hiddenMenu) {
        this.menu?.classList.add("hidden-menu");
        this.filter?.classList.add("hiddenFilter");
        this.filter?.classList.remove("showFilter");
      } else {
        this.menu?.classList.remove("hidden-menu");
        this.filter?.classList.remove("hiddenFilter");
        this.filter?.classList.add("showFilter");
      }
    };
  }
  customElements.define("main-menu", MainMenu);
</script>

<style>
  ,
  .MainMenu {
    @apply w-full lg:grow border;
    nav.menu {
      @apply fixed h-screen
            right-0 top-0 bottom-0 
            bg-primary-dark/90 
            flex flex-col w-[80%] max-lg:max-w-[400px] 
            transition-all duration-500
            lg:static lg:w-full lg:h-auto;
      .areaCloseMenuButton {
        @apply w-full py-2 px-3 text-right grow-0 lg:hidden;
      }
      .menuItems {
        @apply flex flex-col items-center justify-center h-full gap-y-12 grow pb-8
              lg:flex-row lg:items-center gap-x-5 lg:pb-0 text-sm;
      }
    }
  }

  nav.menu.hidden-menu {
    right: -100% !important;
  }

  .navResumeButton {
    @apply px-12 py-3 mt-5 lg:mt-0 lg:px-4 lg:py-2;
  }
  #filter {
    @apply fixed h-screen top-0 right-0 bottom-0 border transition delay-300;
  }

  .hiddenFilter {
    @apply opacity-0 w-0;
  }

  .showFilter {
    @apply w-full;
  }
</style>
